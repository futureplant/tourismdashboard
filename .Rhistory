# https://stackoverflow.com/questions/27782488/r-calculating-the-shortest-distance-between-two-point-layers
hotels <- st_read('output/hotels.geoJSON')
airbnb2019 <- st_read('data/products_airbnb/AirbnbPoints_20190408.geojson')
nbr <- st_read('output/neighbourhoods.geojson')
hotels <- st_intersection(hotels,nbr)
hotels <- st_transform(hotels,28992)
hotels <- as(hotels, 'Spatial')
airbnb2019 <- st_transform(airbnb2019,28992)
airbnb2019 <- as(airbnb2019, 'Spatial')
distances <- get.knnx(coordinates(hotels), coordinates(airbnb2019), k=1)
airbnb2019 <- st_as_sf(airbnb2019)
airbnb2019$dist2hot <- distances$nn.dist
airbnb2019 <- st_transform(airbnb2019,4326)
join <- st_join(airbnb2019, nbr)
keeps <- c('id', 'Buurt_code', 'dist2hot')
join <- join[keeps]
test <- join[which(join$Buurt_code == 'M32a'),]
st_write(join,'intermediate/airbnbdist.geojson', driver='GeoJSON')
mean_distance <- aggregate(join, list(as.factor(join$Buurt_code)), FUN=mean)
st_geometry(mean_distance) <- NULL
mean_distance <- mean_distance[,-which(names(mean_distance) == "Buurt_code")]
names(mean_distance) <- c("Buurt_code", "id", "dist2hot")
nbr <- merge(nbr,mean_distance)
bins <- c(0, 250, 500, 1000, 2500)
pal <- colorBin("YlOrRd", domain = nbr$dist2hot, bins = bins)
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addMarkers(data=hotels, clusterOptions = markerClusterOptions(), popup = ~hotelpopup) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.3,
fillColor = ~pal(dist2hot),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
view(nbr)
View(nbr)
#airbnb2019 <- st_read('data/products_airbnb/AirbnbPoints_20190408.geojson')
airbnball <- st_read('data/products_airbnb/AirbnbPoints_2015to2019.geojson')
View(airbnball)
unique(airbnball$date)
hotels <- st_read('output/hotels.geoJSON')
nbr <- st_read('output/neighbourhoods.geojson')
hotels <- st_intersection(hotels,nbr)
hotels <- st_transform(hotels,28992)
hotels <- as(hotels, 'Spatial')
airbnball <- st_transform(airbnball,28992)
airbnball <- as(airbnball, 'Spatial')
distances <- get.knnx(coordinates(hotels), coordinates(airbnball), k=1)
distances
airbnball <- st_as_sf(airbnball)
airbnball$dist2hot <- distances$nn.dist
airbnball <- st_transform(airbnball,4326)
join <- st_join(airbnball, nbr)
keeps <- c('id', 'Buurt_code', 'dist2hot')
join <- join[keeps]
st_write(join,'intermediate/airbnbdist.geojson', driver='GeoJSON')
join
mean_distance <- aggregate(join, list(as.factor(join$Buurt_code)), FUN=mean)
st_geometry(mean_distance) <- NULL
mean_distance <- mean_distance[,-which(names(mean_distance) == "Buurt_code")]
names(mean_distance) <- c("Buurt_code", "id", "dist2hot")
nbr <- merge(nbr,mean_distance)
# https://stackoverflow.com/questions/27782488/r-calculating-the-shortest-distance-between-two-point-layers
hotels <- st_read('output/hotels.geoJSON')
#airbnb2019 <- st_read('data/products_airbnb/AirbnbPoints_20190408.geojson')
airbnball <- st_read('data/products_airbnb/AirbnbPoints_2015to2019.geojson')
unique(airbnball$date)
nbr <- st_read('output/neighbourhoods.geojson')
hotels <- st_intersection(hotels,nbr)
hotels <- st_transform(hotels,28992)
hotels <- as(hotels, 'Spatial')
airbnball <- st_transform(airbnball,28992)
airbnball <- as(airbnball, 'Spatial')
distances <- get.knnx(coordinates(hotels), coordinates(airbnball), k=1)
airbnball <- st_as_sf(airbnball)
airbnball$dist2hot <- distances$nn.dist
airbnball <- st_transform(airbnball,4326)
join <- st_join(airbnball, nbr)
keeps <- c('id', 'Buurt_code', 'dist2hot')
join <- join[keeps]
test <- join[which(join$Buurt_code == 'M32a'),]
st_write(join,'intermediate/airbnbdist.geojson', driver='GeoJSON')
mean_distance <- aggregate(join, list(as.factor(join$Buurt_code)), FUN=mean)
st_geometry(mean_distance) <- NULL
mean_distance <- mean_distance[,-which(names(mean_distance) == "Buurt_code")]
names(mean_distance) <- c("Buurt_code", "id", "dist2hot")
mean_distance
?split
st_write(join,'intermediate/airbnbdist.geojson', driver='GeoJSON',overwrite=T)
?st_write
st_write(join,'intermediate/airbnbdist.geojson', driver='GeoJSON',delete_dsn=T)
library(sf)
library(sp)
library(FNN)
library(rgdal)
library(leaflet)
# https://stackoverflow.com/questions/27782488/r-calculating-the-shortest-distance-between-two-point-layers
hotels <- st_read('output/hotels.geoJSON')
#airbnb2019 <- st_read('data/products_airbnb/AirbnbPoints_20190408.geojson')
airbnball <- st_read('data/products_airbnb/AirbnbPoints_2015to2019.geojson')
unique(airbnball$date)
nbr <- st_read('output/neighbourhoods.geojson')
hotels <- st_intersection(hotels,nbr)
hotels <- st_transform(hotels,28992)
hotels <- as(hotels, 'Spatial')
airbnball <- st_transform(airbnball,28992)
airbnball <- as(airbnball, 'Spatial')
distances <- get.knnx(coordinates(hotels), coordinates(airbnball), k=1)
airbnball <- st_as_sf(airbnball)
airbnball$dist2hot <- distances$nn.dist
airbnball <- st_transform(airbnball,4326)
join <- st_join(airbnball, nbr)
keeps <- c('id', 'Buurt_code', 'dist2hot')
join <- join[keeps]
test <- join[which(join$Buurt_code == 'M32a'),]
st_write(join,'intermediate/airbnbdist.geojson', driver='GeoJSON',delete_dsn=T)
years <- unique(join)
years
distances <- get.knnx(coordinates(hotels), coordinates(airbnball), k=1)
hotels <- st_read('output/hotels.geoJSON')
#airbnb2019 <- st_read('data/products_airbnb/AirbnbPoints_20190408.geojson')
airbnball <- st_read('data/products_airbnb/AirbnbPoints_2015to2019.geojson')
unique(airbnball$date)
nbr <- st_read('output/neighbourhoods.geojson')
hotels <- st_intersection(hotels,nbr)
hotels <- st_transform(hotels,28992)
hotels <- as(hotels, 'Spatial')
airbnball <- st_transform(airbnball,28992)
airbnball <- as(airbnball, 'Spatial')
distances <- get.knnx(coordinates(hotels), coordinates(airbnball), k=1)
airbnball <- st_as_sf(airbnball)
airbnball$dist2hot <- distances$nn.dist
airbnball <- st_transform(airbnball,4326)
join <- st_join(airbnball, nbr)
View(join)
keeps <- c('id', 'Buurt_code', 'dist2hot','date')
join <- join[keeps]
dates <- unique(join$date)
dates
class(dates)
dates <- as.character(unique(join$date))
class(dates)
class(join$date)
dates <- unique(join$date)
for (date in dates){
print(nrows(join[which(join$date == date)]))
}
for (date in dates){
print(nrow(join[which(join$date == date)]))
}
print(nrow(join[which(join$date == date),]))
dates <- unique(join$date)
for (date in dates){
print(date)
print(nrow(join[which(join$date == date),]))
}
for (date in dates){
print(date)
#print(nrow(join[which(join$date == date),]))
}
dates
for (date in dates){
print(class(date))
#print(nrow(join[which(join$date == date),]))
}
date(16530)
dates <- unique(join$date)
dates
for (date in dates){
print(date)
#print(nrow(join[which(join$date == date),]))
}
dates <- unique(join$date)
class(dates)
for (date in dates){
print(date)
print(nrow(join[which(join$date == date),]))
}
for (date in dates){
print(nrow(join[which(join$date == date),]))
}
nrow(join)
dates <- unique(join$date)
for (date in dates){
print(nrow(join[which(join$date == date),]))
mean_distance <- aggregate(join, list(as.factor(join$Buurt_code)), FUN=mean)
}
mean_distance
mean_distance <- mean_distance[,-which(names(mean_distance) == "Buurt_code")]
mean_distance
mean_distance <- mean_distance[,-which(names(mean_distance) == "id")]
mean_distance
mean_distance$date <- date
mean_distance
dates
mean_distance$date <- startyear
startyear <- 2019
mean_distance$date <- startyear
mean_distance
st_geometry(mean_distance) <- NULL
mean_distance
names(mean_distance) <- c("Buurt_code","dist2hot", "year")
mean_distance
?unique
mean_distance
nrow(mean_distance)
distances <- data.frame(matrix(ncol = 5, nrow = 459),stringsAsFactors = F)
nbr$Buurt_code
nbrnames <- nbr$Buurt_code
distances <- data.frame(matrix(ncol = 5, nrow = 459),stringsAsFactors = F)
distances <- data.frame(matrix(ncol = 0, nrow = 459),stringsAsFactors = F)
distances$Buurt_code <- nbrnames
nbrnames <- unique(nbr$Buurt_code)
distances <- data.frame(matrix(ncol = 0, nrow = 459),stringsAsFactors = F)
distances$Buurt_code <- nbrnames
distances <- data.frame(matrix(ncol = 0, nrow = 481),stringsAsFactors = F)
distances$Buurt_code <- nbrnames
view(distances)
view(distances)
View(distances)
?cbind
?join
library(dplyr)
names(distances)
names(mean_distance)
join(distances, mean_distance, by="Buurt_code")
library(dplyr)
join(distances, mean_distance, by="Buurt_code")
dplyr::join(distances, mean_distance, by="Buurt_code")
library(dplyr)
left_join(distances, mean_distance, by="Buurt_code")
mean_distance <- aggregate(join, list(as.factor(join$Buurt_code)), FUN=mean)
mean_distance <- mean_distance[,-which(names(mean_distance) == "Buurt_code")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "id")]
st_geometry(mean_distance) <- NULL
names(mean_distance) <- c("Buurt_code",paste("dist2hot",startyear))
left_join(distances, mean_distance, by="Buurt_code")
mean_distance
mean_distance <- aggregate(join, list(as.factor(join$Buurt_code)), FUN=mean)
mean_distance
mean_distance <- mean_distance[,-which(names(mean_distance) == "Buurt_code")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "id")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "date")]
st_geometry(mean_distance) <- NULL
names(mean_distance) <- c("Buurt_code",paste("dist2hot",startyear))
left_join(distances, mean_distance, by="Buurt_code")
distances
mean_distance <- aggregate(join, list(as.factor(join$Buurt_code)), FUN=mean)
mean_distance <- mean_distance[,-which(names(mean_distance) == "Buurt_code")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "id")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "date")]
date
st_geometry(mean_distance) <- NULL
names(mean_distance) <- c("Buurt_code",paste("dist2hot",startyear))
left_join(distances, mean_distance, by="Buurt_code")
distances
distances <- left_join(distances, mean_distance, by="Buurt_code")
distances
distances <- data.frame(matrix(ncol = 0, nrow = 481),stringsAsFactors = F)
distances$Buurt_code <- nbrnames
startyear <- 2015
for (date in dates){
print(nrow(join[which(join$date == date),]))
mean_distance <- aggregate(join, list(as.factor(join$Buurt_code)), FUN=mean)
mean_distance <- mean_distance[,-which(names(mean_distance) == "Buurt_code")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "id")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "date")]
st_geometry(mean_distance) <- NULL
names(mean_distance) <- c("Buurt_code",paste("dist2hot",startyear))
distances <- left_join(distances, mean_distance, by="Buurt_code")
}
distances
dates <- unique(join$date)
nbrnames <- unique(nbr$Buurt_code)
distances <- data.frame(matrix(ncol = 0, nrow = 481),stringsAsFactors = F)
distances$Buurt_code <- nbrnames
startyear <- 2015
for (date in dates){
print(nrow(join[which(join$date == date),]))
mean_distance <- aggregate(join, list(as.factor(join$Buurt_code)), FUN=mean)
mean_distance <- mean_distance[,-which(names(mean_distance) == "Buurt_code")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "id")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "date")]
st_geometry(mean_distance) <- NULL
names(mean_distance) <- c("Buurt_code",paste("dist2hot",startyear))
distances <- left_join(distances, mean_distance, by="Buurt_code")
startyear <- startyear + 1
}
distances
distances <- data.frame(matrix(ncol = 0, nrow = 481),stringsAsFactors = F)
distances$Buurt_code <- nbrnames
startyear <- 2015
for (date in dates){
subset <- join[which(join$date == date),]
mean_distance <- aggregate(subset, list(as.factor(join$Buurt_code)), FUN=mean)
mean_distance <- mean_distance[,-which(names(mean_distance) == "Buurt_code")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "id")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "date")]
st_geometry(mean_distance) <- NULL
names(mean_distance) <- c("Buurt_code",paste("dist2hot",startyear))
distances <- left_join(distances, mean_distance, by="Buurt_code")
startyear <- startyear + 1
}
join[which(join$date == date),]
mean_distance <- aggregate(subset, list(as.factor(join$Buurt_code)), FUN=mean)
subset <- join[which(join$date == date),]
mean_distance <- aggregate(subset, list(as.factor(join$Buurt_code)), FUN=mean)
st_geometry(subset) <- NULL
mean_distance <- aggregate(subset, list(as.factor(join$Buurt_code)), FUN=mean)
mean_distance <- aggregate(subset, list(as.factor(subset$Buurt_code)), FUN=mean)
subset <- join[which(join$date == date),]
mean_distance <- aggregate(subset, list(as.factor(subset$Buurt_code)), FUN=mean)
mean_distance <- mean_distance[,-which(names(mean_distance) == "Buurt_code")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "id")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "date")]
st_geometry(mean_distance) <- NULL
dates <- unique(join$date)
nbrnames <- unique(nbr$Buurt_code)
distances <- data.frame(matrix(ncol = 0, nrow = 481),stringsAsFactors = F)
distances$Buurt_code <- nbrnames
startyear <- 2015
for (date in dates){
subset <- join[which(join$date == date),]
mean_distance <- aggregate(subset, list(as.factor(subset$Buurt_code)), FUN=mean)
mean_distance <- mean_distance[,-which(names(mean_distance) == "Buurt_code")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "id")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "date")]
st_geometry(mean_distance) <- NULL
names(mean_distance) <- c("Buurt_code",paste("dist2hot",startyear))
distances <- left_join(distances, mean_distance, by="Buurt_code")
startyear <- startyear + 1
}
distances
class(nbr)
names(nbr)
nbr <- left_join(nbr,distances,by="Buurt_code")
view(nbr)
View(nbr)
# https://stackoverflow.com/questions/27782488/r-calculating-the-shortest-distance-between-two-point-layers
hotels <- st_read('output/hotels.geoJSON')
#airbnb2019 <- st_read('data/products_airbnb/AirbnbPoints_20190408.geojson')
airbnball <- st_read('data/products_airbnb/AirbnbPoints_2015to2019.geojson')
unique(airbnball$date)
nbr <- st_read('output/neighbourhoods.geojson')
hotels <- st_intersection(hotels,nbr)
hotels <- st_transform(hotels,28992)
hotels <- as(hotels, 'Spatial')
airbnball <- st_transform(airbnball,28992)
airbnball <- as(airbnball, 'Spatial')
distances <- get.knnx(coordinates(hotels), coordinates(airbnball), k=1)
airbnball <- st_as_sf(airbnball)
airbnball$dist2hot <- distances$nn.dist
airbnball <- st_transform(airbnball,4326)
join <- st_join(airbnball, nbr)
keeps <- c('id', 'Buurt_code', 'dist2hot','date')
join <- join[keeps]
dates <- unique(join$date)
nbrnames <- unique(nbr$Buurt_code)
distances <- data.frame(matrix(ncol = 0, nrow = 481),stringsAsFactors = F)
distances$Buurt_code <- nbrnames
startyear <- 2015
for (date in dates){
subset <- join[which(join$date == date),]
mean_distance <- aggregate(subset, list(as.factor(subset$Buurt_code)), FUN=mean)
mean_distance <- mean_distance[,-which(names(mean_distance) == "Buurt_code")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "id")]
mean_distance <- mean_distance[,-which(names(mean_distance) == "date")]
st_geometry(mean_distance) <- NULL
names(mean_distance) <- c("Buurt_code",paste0("dist2hot",startyear))
distances <- left_join(distances, mean_distance, by="Buurt_code")
startyear <- startyear + 1
}
nbr <- left_join(nbr,distances,by="Buurt_code")
bins <- c(0, 250, 500, 1000, 2500)
pal <- colorBin("YlOrRd", domain = nbr$dist2hot2019, bins = bins)
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.3,
fillColor = ~pal(dist2hot2019),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.3,
fillColor = ~pal(dist2hot2018),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.3,
fillColor = ~pal(dist2hot2017),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(nbr$dist2hot2019),
na.color = "transparent")
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.3,
fillColor = ~pal(dist2hot2017),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(nbr$dist2hot2019),
na.color = "transparent")
m <- leaflet() %>% setView(lng = 4.898940, lat = 52.382676, zoom = 11)
m %>% addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addPolygons(data = nbr,color = "#444444", weight = 0.4, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.3,
fillColor = ~pal(dist2hot2019),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
nbr <- st_read('output/neighbourhoods.geojson')
library(sf)
library(sp)
library(FNN)
library(rgdal)
library(leaflet)
library(dplyr)
library(htmltools)
library(htmlwidgets)
nbr <- st_read('output/neighbourhoods.geojson')
names(nbr)
setwd("D:/GIS Files/tourismdashboard")
shiny::runApp()
setwd("D:/GIS Files/tourismdashboard")
runApp()
runApp()
?dashboardPage
runApp()
setwd("D:/GIS Files/tourism/R_FlickrTwitter")
?menuItem
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
runApp('D:/GIS Files/tourismdashboard')
nbr <- st_read('data/neighbourhoods.geojson')
getWD()
getwd()
setwd("D:/GIS Files/tourismdashboard")
nbr <- st_read('data/neighbourhoods.geojson')
hotels <- st_read('data/hotels.geojson')
runApp()
runApp()
runApp()
setwd("D:/GIS Files/tourism")
# main script for data analysis
# libraries and scripts
library(geojsonio)
library(sf)
library(leaflet)
library(htmltools)
library(htmlwidgets)
library(tidyverse)
source('scripts/addresslocator.R')
# load in data
hotels <- read.csv('data/hotels_amsterdam.csv', stringsAsFactors = FALSE)
# Clean data
hotels <- hotels[1:nrow(hotels)-1,]
hotels[hotels=="P CORNELISZ HOOFTSTR"]<-"PIETER CORNELISZ HOOFTSTRAAT"
hotels[hotels=="PIETER JACOBSZOONDWARSSTRAAT"]<-"pieter jacobszdwarsstraat"
hotels[hotels=="PROVINCIALE WEG"]<-"provincialeweg"
hotels[hotels=="1054BV"]<-""
hotels[hotels=="1E C HUYGENSSTR"]<- "Eerste+Constantijn+Huygensstraat"
hotels[hotels=="103-105"]<- 103
hotels[hotels=="315-331"] <- 315
hotels[hotels=="387-390"] <- 387
# read neighbourhood data
nbr <- geojsonio::geojson_read("data/GEBIED_BUURTEN.json",what = "sp")
nbr <- st_as_sf(nbr)
# read airbnb data
airbnb <- geojsonio::geojson_read("data/airbnb2019.geojson",what = "sp")
airbnb <- st_as_sf(airbnb)
airbnb
names(airbnb)
plot(airbnb)
setwd("D:/GIS Files/tourismdashboard")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?iframe
??iframe
library(shinyLP)
install.packages('shinyLP')
library(shinyLP)
runApp()
runApp()
runApp()
runApp()
runApp()
